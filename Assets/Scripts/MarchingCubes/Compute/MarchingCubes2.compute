#pragma kernel March
#include "/MarchTables.compute"

static const int numThreads = 8;

struct Triangle
{
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
    int3 color;
};

shared StructuredBuffer<float> points;
shared AppendStructuredBuffer<Triangle> triangles;

float isoLevel;

float3 chunkPos;

int numPointsPerAxis;
int chunkDensity;

int IndexFromCoord(int x, int y, int z) 
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float3 InterpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

[numthreads(numThreads, numThreads, numThreads)]
void March (int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) 
    {
        return;
    }

    float cubeCorners[8] = 
    {
        points[IndexFromCoord(id.x,     id.y,     id.z	  )],
        points[IndexFromCoord(id.x + 1, id.y,     id.z    )],
        points[IndexFromCoord(id.x + 1, id.y,     id.z + 1)],
        points[IndexFromCoord(id.x,     id.y,     id.z + 1)],
        points[IndexFromCoord(id.x,     id.y + 1, id.z    )],
        points[IndexFromCoord(id.x + 1, id.y + 1, id.z    )],
        points[IndexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[IndexFromCoord(id.x,     id.y + 1, id.z + 1)],
    };

    int cubeIndex = 0;
    if (cubeCorners[0] < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1] < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2] < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3] < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4] < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5] < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6] < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7] < isoLevel) cubeIndex |= 128;

    float3 pos = id.xyz;

    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
    {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i +1 ]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertexA = InterpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = InterpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = InterpolateVerts(cubeCorners[a2], cubeCorners[b2]);

        float3 vecWorldPos = (chunkPos * numPointsPerAxis) + pos;
        int r = (sin(vecWorldPos.x / 16.0) + 1.0) * (127.5);
        int g = (sin(vecWorldPos.y / 32.0) + 1.0) * (127.5);
        int b = (sin(vecWorldPos.z / 64.0) + 1.0) * (127.5);
        tri.color = int3(r, g, b);

        triangles.Append(tri);
    }


}
